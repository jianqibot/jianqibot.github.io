<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jianqi&#39;s blog</title>
    <link>https://jianqibot.github.io/feed.xml</link>
    <description>Recent content on Jianqi&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 27 May 2022 00:39:23 +1000</lastBuildDate><atom:link href="https://jianqibot.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Java 组合与继承</title>
      <link>https://jianqibot.github.io/post/c12-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</link>
      <pubDate>Fri, 27 May 2022 00:39:23 +1000</pubDate>
      
      <guid>https://jianqibot.github.io/post/c12-%E7%BB%84%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/</guid>
      <description>面向对象：组合与继承 继承的本质是避免重复 程序员的宿命就是复制粘贴？ 真的只能这样吗？ DRY原则/事不过三，三则重构 继承的本质就是提炼公用的代码</description>
    </item>
    
    <item>
      <title>Java-封装与访问控制</title>
      <link>https://jianqibot.github.io/post/c11-%E5%B0%81%E8%A3%85%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sat, 21 May 2022 23:40:35 +1000</pubDate>
      
      <guid>https://jianqibot.github.io/post/c11-%E5%B0%81%E8%A3%85%E4%B8%8E%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid>
      <description>面向对象：封装与访问控制 封装及其必要性 封装就是隐藏内部实现的细节，只暴露接口 public class Home { public static void main(Strinf[] args) { Light light1 = new Light(); light.turnOn(); Light light2 = new Light(); light2.打开电路</description>
    </item>
    
    <item>
      <title>Java GC</title>
      <link>https://jianqibot.github.io/post/c57-info/</link>
      <pubDate>Mon, 18 Apr 2022 23:03:34 +1100</pubDate>
      
      <guid>https://jianqibot.github.io/post/c57-info/</guid>
      <description>内存模型与垃圾回收的基本知识 Java的自动内存管理 垃圾回收两个派别 -&amp;gt; 手动管理/自动管理 自动管理两个派别 -&amp;gt; 引用计数/标记清除 引用计数: 看每个对</description>
    </item>
    
    <item>
      <title>Renting Obligations</title>
      <link>https://jianqibot.github.io/post/renting-obliations/</link>
      <pubDate>Sun, 16 Jan 2022 20:29:34 +1100</pubDate>
      
      <guid>https://jianqibot.github.io/post/renting-obliations/</guid>
      <description>前言 当您看到这篇帖子的时候，我猜想您已经在认真考虑是否租房的问题了。 感谢您抽空来看房，这说明我们之间有缘分。此公寓的最大特点就是地段好， 去市</description>
    </item>
    
    <item>
      <title>Java Package Manager</title>
      <link>https://jianqibot.github.io/post/java-package-manager/</link>
      <pubDate>Fri, 07 Jan 2022 23:16:19 +1100</pubDate>
      
      <guid>https://jianqibot.github.io/post/java-package-manager/</guid>
      <description>Java中的传递性依赖 我们先来看一下JVM的基本工作流程 执行一个类的字节码 如果碰到了新的类，加载它 从 -classpath里面找，classp</description>
    </item>
    
    <item>
      <title>How to Use Docker Compose For Springboot App</title>
      <link>https://jianqibot.github.io/post/docker-compose/</link>
      <pubDate>Fri, 07 Jan 2022 23:07:56 +1100</pubDate>
      
      <guid>https://jianqibot.github.io/post/docker-compose/</guid>
      <description>Background I need to deploy my springboot application onto AWS cloud. My app is connected to a MySQL container brought up by docker. I use Flyway to do database migration. In my own laptop, my first step is to use docker to run a MySQL container. Then type mvn flyay:migrate in IDEA and run my application. Now all these three things must happen on cloud so I choose to use docker compose to finsih this task.</description>
    </item>
    
    <item>
      <title>Java Collections</title>
      <link>https://jianqibot.github.io/post/java-collections/</link>
      <pubDate>Fri, 07 Jan 2022 22:10:34 +1100</pubDate>
      
      <guid>https://jianqibot.github.io/post/java-collections/</guid>
      <description>集合类的特点 集合只用于存储对象，集合长度是可变的，集合可以存储不同类型的对象并且高效的操作数据。 推荐看一下collection继承体系图 抽象</description>
    </item>
    
    <item>
      <title>PackageManagingInJava</title>
      <link>https://jianqibot.github.io/posts/packagemanaginginjava/</link>
      <pubDate>Sun, 18 Jul 2021 12:30:25 +1000</pubDate>
      
      <guid>https://jianqibot.github.io/posts/packagemanaginginjava/</guid>
      <description>Table of Contents 1. JVM的工作流程很简单: 2. JVM如何找到需要加载的类 3. 传递性依赖 4. classpath hell 5. 当引用第三方包的时候，需要告诉JVM去哪里找，这时候需要包管</description>
    </item>
    
  </channel>
</rss>
